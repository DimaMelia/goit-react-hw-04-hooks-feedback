{"version":3,"sources":["Components/Section/Section.module.css","Components/Controls/Controls.module.css","Components/Controls/Controls.js","Components/Statistics/Statistics.js","Components/Section/Section.js","Components/Notification/Notification.js","Components/Feedback.js","App.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","className","map","option","type","s","controlBtn","name","onClick","Statistics","total","positivePercentage","Object","entries","key","value","Section","title","children","container","Notification","message","Feedback","useState","good","neutral","bad","setOptions","countTotalFeedback","values","reduce","keys","event","target","Math","round","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,yB,iBCAjED,EAAOC,QAAU,CAAC,WAAa,+B,2KCwBhBC,MAtBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,qBAAKC,UAAU,WAAf,SACGF,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SACLH,UAAWI,IAAEC,WACbC,KAAMJ,EAENK,QAASR,EALX,SAOGG,GAHIA,SCUAM,MAnBf,YAA6D,IAAvCV,EAAsC,EAAtCA,QAASW,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBACpC,OACE,gCACGC,OAAOC,QAAQd,GAASG,KAAI,mCAAEY,EAAF,KAAOC,EAAP,YAC3B,8BACGD,EADH,KACUC,IADFD,MAIV,wCAAWJ,KACX,oDAAuBC,EAAvB,W,gBCASK,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,0BAASjB,UAAWI,IAAEc,UAAtB,UACE,oBAAIlB,UAAWI,IAAEY,MAAjB,SAAyBA,IACxBC,MCFQE,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCiGEC,MA3Ff,WAAqB,IAAD,EACYC,mBAAS,CAAEC,KAAM,EAAGC,QAAS,EAAGC,IAAK,IADjD,mBACX3B,EADW,KACF4B,EADE,KAUZC,EAAqB,kBACzBhB,OAAOiB,OAAO9B,GAAS+B,QAAO,SAACpB,EAAOP,GAAR,OAAmBO,EAAQP,MAM3D,OACE,sBAAKF,UAAU,WAAf,UACE,eAAC,EAAD,CAASgB,MAAM,wBAAf,UACE,cAAC,EAAD,CACElB,QAASa,OAAOmB,KAAKhC,GACrBC,gBAnBgB,SAAAgC,GACtBL,EAAW,2BACN5B,GADK,kBAEPiC,EAAMC,OAAO1B,KAAOR,EAAQiC,EAAMC,OAAO1B,MAAQ,QAkBtB,IAAzBqB,KACC,cAAC,EAAD,CAAcP,QAAQ,2BAIE,IAAzBO,MACD,cAAC,EAAD,CAASX,MAAM,aAAf,SACE,cAAC,EAAD,CACElB,QAASA,EACTW,MAAOkB,IACPjB,mBApBDuB,KAAKC,MAAO,IAAMP,IAAwB7B,EAAQyB,cCb9CY,MAJf,WACE,OAAO,cAAC,EAAD,KCCTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f9cc76b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__1jZeU\",\"title\":\"Section_title__3SXo3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlBtn\":\"Controls_controlBtn__gvGiW\"};","import propTypes from 'prop-types';\r\nimport s from './Controls.module.css';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div className=\"controls\">\r\n      {options.map(option => (\r\n        <button\r\n          type=\"button\"\r\n          className={s.controlBtn}\r\n          name={option}\r\n          key={option}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: propTypes.arrayOf(propTypes.string),\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import propTypes from 'prop-types';\r\n\r\nfunction Statistics({ options, total, positivePercentage }) {\r\n  return (\r\n    <div>\r\n      {Object.entries(options).map(([key, value]) => (\r\n        <p key={key}>\r\n          {key}: {value}\r\n        </p>\r\n      ))}\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  total: propTypes.number,\r\n  positivePercentage: propTypes.number,\r\n};\r\n\r\nexport default Statistics;\r\n","import s from \"./Section.module.css\";\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section className={s.container}>\r\n      <h2 className={s.title}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nexport default Notification;\r\n","import React, { useEffect, useState } from 'react';\r\n// import propTypes from 'prop-types';\r\nimport FeedbackOptions from './Controls/Controls';\r\nimport Statistics from './Statistics/Statistics';\r\nimport Section from './Section/Section';\r\nimport Notification from './Notification/Notification';\r\n\r\nfunction Feedback() {\r\n  const [options, setOptions] = useState({ good: 0, neutral: 0, bad: 0 });\r\n\r\n  const onLeaveFeedback = event => {\r\n    setOptions({\r\n      ...options,\r\n      [event.target.name]: options[event.target.name] + 1,\r\n    });\r\n  };\r\n\r\n  const countTotalFeedback = () =>\r\n    Object.values(options).reduce((total, option) => total + option);\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return Math.round((100 / countTotalFeedback()) * options.good);\r\n  };\r\n\r\n  return (\r\n    <div className=\"feedback\">\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions\r\n          options={Object.keys(options)}\r\n          onLeaveFeedback={onLeaveFeedback}\r\n        />\r\n        {countTotalFeedback() === 0 && (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </Section>\r\n\r\n      {!(countTotalFeedback() === 0) && (\r\n        <Section title=\"Statistics\">\r\n          <Statistics\r\n            options={options}\r\n            total={countTotalFeedback()}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        </Section>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  //   state = {\r\n  //     good: 0,\r\n  //     neutral: 0,\r\n  //     bad: 0,\r\n  //   };\r\n\r\n  //   countTotalFeedback = () => {\r\n  //     const { good, neutral, bad } = this.state;\r\n  //     return good + neutral + bad;\r\n  //   };\r\n\r\n  //   countPositiveFeedbackPercentage = () => {\r\n  //     return Math.round((100 / this.countTotalFeedback()) * this.state.good);\r\n  //   };\r\n\r\n  //   onLeaveFeedback = (event) => {\r\n  //     return this.setState((prevState) => ({\r\n  //       [event.target.value]: prevState[event.target.value] + 1,\r\n  //     }));\r\n  //   };\r\n\r\n  //   render() {\r\n  //     const { good, neutral, bad } = this.state;\r\n  //     return (\r\n  //       <div className=\"feedback\">\r\n  //         <Section title=\"Please leave feedback\">\r\n  //           <FeedbackOptions\r\n  //             options={[\"Good\", \"Neutral\", \"Bad\"]}\r\n  //             onLeaveFeedback={this.onLeaveFeedback}\r\n  //           />\r\n  //           {this.countTotalFeedback() === 0 && (\r\n  //             <Notification message=\"No feedback given\" />\r\n  //           )}\r\n  //         </Section>\r\n\r\n  //         {!(this.countTotalFeedback() === 0) && (\r\n  //           <Section title=\"Statistics\">\r\n  //             <Statistics\r\n  //               good={good}\r\n  //               neutral={neutral}\r\n  //               bad={bad}\r\n  //               total={this.countTotalFeedback()}\r\n  //               positivePercentage={this.countPositiveFeedbackPercentage()}\r\n  //             />\r\n  //           </Section>\r\n  //         )}\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n}\r\nexport default Feedback;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Feedback from \"./Components/Feedback\";\n\nfunction App() {\n  return <Feedback />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}